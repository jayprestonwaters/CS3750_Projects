package com.example.investmentproject;

import com.example.investmentproject.ticker.repositories.InvestmentRepository;
import com.example.investmentproject.ticker.repositories.TickerRepository;
import com.example.investmentproject.ticker.repositories.UserRepository;
import org.hibernate.boot.registry.classloading.internal.TcclLookupPrecedence;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import com.example.investmentproject.ticker.domain.Investment;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import com.example.investmentproject.ticker.domain.Ticker;
import com.example.investmentproject.ticker.domain.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import yahoofinance.YahooFinance;

import java.time.LocalDateTime;
import java.math.RoundingMode;
import java.math.BigDecimal;
import java.io.IOException;
import yahoofinance.Stock;

import java.time.ZoneId;
import java.util.*;


@Controller
public class TickerController {
    // @Autowired means to get the bean called *Repository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private TickerRepository tickerRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private InvestmentRepository investmentRepository;

    @GetMapping("/")
    public String landingGet(Model model) throws IOException {
        if (userRepository.findById(1).isPresent()) {
            List<Investment> investmentList = investmentRepository.findInvestmentByuserid(1);
            List<List<Object>> investmentData = new ArrayList<>();
            long investments = investmentList.size();
            if (investments > 0) {
                for (Investment i : investmentList) {
                    assert false;
                    investmentData.add(List.of(i.getTicker_Symbol(), i.getSubdivision()));
                }
            }
            User user = userRepository.findById(1).get();
            model.addAttribute("requestType", "existingUser");
            model.addAttribute("starting_investment", user.getStarting_investment());
            model.addAttribute("investmentList", investmentList);
            model.addAttribute("investmentData", investmentData);

            investmentOptions(model);
        }
        else {
            model.addAttribute("user", new User());
            model.addAttribute("requestType", "newUser");
        }
        return "landing";
    }

    @PostMapping("/")
    public String landingPost(@RequestParam BigDecimal starting_investment, Model model) throws IOException {
        User u = new User();
        u.setId(1);
        u.setStarting_investment(starting_investment);

        userRepository.deleteAll();
        userRepository.save(u);
        model.addAttribute("user", u);

        return landingGet(model);
    }

    @GetMapping(value = "/investment", params = "ticker_symbol")
    public String investmentGet(@RequestParam("ticker_symbol") String ticker_symbol, Model model) throws IOException {
        if (userRepository.findById(1).isPresent()) {
            User user = userRepository.findById(1).get();
            List<Investment> investmentList = investmentRepository.findInvestmentByuserid(1);

            long investments = investmentList.size();
            BigDecimal previous = new BigDecimal(0);
            BigDecimal remaining = new BigDecimal(100);
            if (investments > 0){
                for (Investment i : investmentList) {
                    previous = previous.add(i.getSubdivision());
                }
            }
            remaining = remaining.subtract(previous);

            model.addAttribute("starting_investment", user.getStarting_investment());
            model.addAttribute("requestType", "newInvestment");
            model.addAttribute("investment", new Investment());
            model.addAttribute("ticker_symbol", ticker_symbol);
            model.addAttribute("remaining", remaining);



            return "investment";
        }
        else {
            model.addAttribute("requestType", "newUser");

            return landingGet(model);
        }
    }

    @PostMapping(value = "/investment")
    public String investmentPost(@ModelAttribute Investment i, Model model) throws IOException {
        String ticker_symbol = i.getTicker_Symbol();
        Stock stock = YahooFinance.get(ticker_symbol);
        BigDecimal stockPrice = stock.getQuote().getPrice();

        if (userRepository.findById(1).isPresent()) {
            model.addAttribute("requestType", "existingUser");

            BigDecimal startingInvestment = userRepository.findById(1).get().getStarting_investment();
            BigDecimal subdivision = investmentCheck(i);
            BigDecimal percentage = subdivision.scaleByPowerOfTen(-2);
            BigDecimal invested = startingInvestment.multiply(percentage);
            BigDecimal shares = invested.divide(stockPrice, RoundingMode.HALF_EVEN);
            BigDecimal investmentPrice = stockPrice;

            Investment investment = new Investment(1, subdivision, invested, shares, ticker_symbol, new Date(), investmentPrice);
            investmentRepository.save(investment);
            model.addAttribute("investment", investment);
            model.addAttribute("subdivision", investment.getSubdivision());
            model.addAttribute("invested", investment.getInvested());
            model.addAttribute("shares", investment.getShares());
            model.addAttribute("ticker_symbol", investment.getTicker_Symbol());
            model.addAttribute("timestamp", investment.getTimestamp());
            model.addAttribute("investmentPrice", investment.getinvestmentPrice());
        }
        else {
            model.addAttribute("requestType", "newUser");
        }

        return landingGet(model);
    }

    @GetMapping(value = "/history")
    public String historyGet(Model model) throws IOException {
        if (userRepository.findById(1).isPresent()) {
            List<Investment> investmentList = investmentRepository.findInvestmentByuserid(1);
            List <ArrayList<ArrayList<Object>>> historyChartData = new ArrayList<>();

            BigDecimal totalInvestment = BigDecimal.ZERO;
            for (Investment i : investmentList) {
                totalInvestment = totalInvestment.add(i.getInvested());
            }
            BigDecimal totalValue = BigDecimal.ZERO;
            for (Investment i : investmentList) {
                BigDecimal shares = i.getInvested().divide(i.getinvestmentPrice(), RoundingMode.HALF_EVEN);
                BigDecimal currentPrice = getCurrentPrice(i.getTicker_Symbol());
                if(i.getinvestmentPrice().equals(currentPrice)){
                    totalValue = totalValue.add(i.getInvested());
                }
                else {
                    totalValue = totalValue.add(shares.multiply(currentPrice));
                }
            }
            BigDecimal totalReturn = totalValue.subtract(totalInvestment);

            model.addAttribute("totalInvestment", totalInvestment);
            model.addAttribute("totalValue", totalValue);
            model.addAttribute("totalReturn", totalReturn);

            Investment appleInvestment = null;
            for (Investment i : investmentList) {
                var symbol = i.getTicker_Symbol();
                if (Objects.equals(symbol, "AAPL")) {
                    appleInvestment = i;
                }
            }
            Stock apple = YahooFinance.get("AAPL");
            if (appleInvestment != null) {
                var applePrices = getPrices(apple);
                model.addAttribute("applePrices", applePrices);

                historyChartData.add(applePrices);
            }

            Investment msInvestment = null;
            for (Investment i : investmentList) {
                var symbol = i.getTicker_Symbol();
                if (Objects.equals(symbol, "MSFT")) {
                    msInvestment = i;
                }
            }
            Stock microsoft = YahooFinance.get("MSFT");
            if (msInvestment != null) {
                var msPrices = getPrices(microsoft);
                model.addAttribute("msPrices", msPrices);

                historyChartData.add(msPrices);
            }

            Investment teslaInvestment = null;
            for (Investment i : investmentList) {
                var symbol = i.getTicker_Symbol();
                if (Objects.equals(symbol, "TSLA")) {
                    teslaInvestment = i;
                }
            }
            Stock tesla = YahooFinance.get("TSLA");
            if (teslaInvestment != null) {
                var teslaPrices = getPrices(tesla);
                model.addAttribute("teslaPrices", teslaPrices);

                historyChartData.add(teslaPrices);
            }
            model.addAttribute("historyChartData", historyChartData);
            return "history";
        }

        return landingGet(model);
    }

    public void investmentOptions(Model model) throws IOException {
        Date time = new Date();
        LocalDateTime ldt = LocalDateTime.now();
        var newDate = time.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        Stock apple = YahooFinance.get("AAPL");
        Stock microsoft = YahooFinance.get("MSFT");
        Stock tesla = YahooFinance.get("TSLA");

        Ticker t1 = new Ticker(apple.getSymbol(), apple.getQuote().getPrice(), time);
        Ticker t2 = new Ticker(microsoft.getSymbol(), microsoft.getQuote().getPrice(), time);
        Ticker t3 = new Ticker(tesla.getSymbol(), tesla.getQuote().getPrice(), time);

        model.addAttribute("appleSymbol", t1.getSymbol());
        model.addAttribute("applePrice", t1.getPrice());
        model.addAttribute("appleDate", ldt);

        model.addAttribute("microsoftSymbol", t2.getSymbol());
        model.addAttribute("microsoftPrice", t2.getPrice());
        model.addAttribute("microsoftDate", ldt);

        model.addAttribute("teslaSymbol", t3.getSymbol());
        model.addAttribute("teslaPrice", t3.getPrice());
        model.addAttribute("teslaDate", ldt);

        model.addAttribute("t1", t1);
        model.addAttribute("t2", t2);
        model.addAttribute("t3", t3);

        List<Ticker> tickerList = new ArrayList<>();
        tickerList.add(t1);
        tickerList.add(t2);
        tickerList.add(t3);
        model.addAttribute("ticker", new Ticker());
        model.addAttribute("tickerList", tickerList);

        tickerRepository.saveAll(Arrays.asList(t1, t2, t3));
    }

    public BigDecimal investmentCheck(Investment investment) {
        BigDecimal subdivision = investment.getSubdivision();
        if (userRepository.findById(1).isPresent()) {
            List<Investment> investmentList = investmentRepository.findInvestmentByuserid(1);

            long investments = investmentList.size();
            BigDecimal previous = new BigDecimal(0);
            BigDecimal remaining = new BigDecimal(100);
            if (investments > 0) {
                for (Investment i : investmentList) {
                    previous = previous.add(i.getSubdivision());
                }
            }
            remaining = remaining.subtract(previous);

            if (subdivision.compareTo(remaining) > 0) {
                subdivision = remaining;
            }
        }
        return subdivision;
    }

    public ArrayList<ArrayList<Object>> getPrices(Stock stock) {
        List<Ticker> tickerList = ticketHistorySinceDate(stock);

        ArrayList<ArrayList<Object>> list = new ArrayList<>();
        for (Ticker t : tickerList) {
            var array = new ArrayList<Object>();
            var date = t.getTime().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            array.add(date);
            array.add(t.getPrice());
            boolean exists = false;
            for(ArrayList item : list){
                if(item.get(0).equals(array.get(0))){
                    exists = true;
                }
            }
            if(!exists){
                list.add(array);
            }
        }
        return list;
    }

    public List<Ticker> ticketHistorySinceDate(Stock stock) {
        var symbol = stock.getSymbol();

        var tickers = tickerRepository.findAll();

        List<Ticker> result = new ArrayList<Ticker>();

        for (Ticker t : tickers) {
            if (symbol.equals(t.getSymbol())) {
                result.add(t);
            }
        }

        return result;
    }

    public BigDecimal getCurrentPrice(String symbol) throws IOException {
        Date time = new Date();
        Stock stock = null;

        switch(symbol) {
            case "AAPL":
                stock = YahooFinance.get("AAPL");
                break;
            case "MSFT":
                stock = YahooFinance.get("MSFT");
                break;
            case "TSLA":
                stock = YahooFinance.get("TSLA");
                break;
            default:
                break;
        }

        if (stock != null) {
            return stock.getQuote().getPrice();
        }
        else {
            return BigDecimal.ZERO;
        }

    }
}