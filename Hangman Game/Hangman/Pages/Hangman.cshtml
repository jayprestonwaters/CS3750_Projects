@page 
@model Hangman.Pages.HangmanModel
@{
}

<h1>Welcome to hangman!</h1>
<p id="stateLabel">Ready to play...</p>

<div>
    
    <input id="connectionUrl" hidden/>
    <button id="connectButton" type="submit">Start Game</button>
</div>
<p></p>
<div>
    <label for="sendMessage">Guess:</label>
    <input id="sendMessage" disabled />
    <button id="sendButton" type="submit" disabled>Submit</button>
    <button id="closeButton" disabled>End Game</button>
    <img id="hangman" src="~/hangman1.png" width="400" height="200"/>
</div>

<h2>Guess Log</h2>
<table style="width: 800px">
    <thead>
        <tr>
            <td style="width: 100px">Guess status</td>
            <td style="width: 100px"> Your guess</td>
        </tr>
    </thead>
    <tbody id="commsLog">
    </tbody>
</table>

<script>
    var connectionUrl = document.getElementById("connectionUrl");
    var connectButton = document.getElementById("connectButton");
    var stateLabel = document.getElementById("stateLabel");
    var sendMessage = document.getElementById("sendMessage");
    var sendButton = document.getElementById("sendButton");
    var commsLog = document.getElementById("commsLog");
    var closeButton = document.getElementById("closeButton");
    var hangman = document.getElementById("hangman");
    var socket;

    var scheme = document.location.protocol === "https:" ? "wss" : "ws";
    var port = document.location.port ? (":" + document.location.port) : "";

    connectionUrl.value = scheme + "://" + document.location.hostname + port + "/ws" ;

    function updateState() {
        function disable() {
            sendMessage.disabled = true;
            sendButton.disabled = true;
            closeButton.disabled = true;
        }
        function enable() {
            sendMessage.disabled = false;
            sendButton.disabled = false;
            closeButton.disabled = false;
        }

        connectionUrl.hidden = true;
        connectButton.hidden = true;

        if (!socket) {
            disable();
        } else {
            switch (socket.readyState) {
                case WebSocket.CLOSED:
                    stateLabel.innerHTML = "Closed";
                    disable();
                    connectionUrl.disabled = false;
                    connectButton.disabled = false;
                    break;
                case WebSocket.CLOSING:
                    stateLabel.innerHTML = "Closing...";
                    disable();
                    break;
                case WebSocket.CONNECTING:
                    stateLabel.innerHTML = "Connecting...";
                    disable();
                    break;
                case WebSocket.OPEN:
                    stateLabel.innerHTML = "Open";
                    enable();
                    break;
                default:
                    stateLabel.innerHTML = "Unknown WebSocket State: " + htmlEscape(socket.readyState);
                    disable();
                    break;
            }
        }
    }

    closeButton.onclick = function () {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("socket not connected");
        }
        socket.close(1000,"Game ended");
    };

    sendButton.onclick = function () {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("socket not connected");
        }
        var data = sendMessage.value;
        let length = data.length;
        if(length > 1){
            alert("Please enter one character");
        }
        else{
            socket.send(data);
            commsLog.innerHTML += '<tr>' +
            '<td class="commslog-data"></td>' +
            '<td class="commslog-data">' + htmlEscape(data) + '</td></tr>';
        }
    };

    connectButton.onclick = function() {
        stateLabel.innerHTML = "Connecting";
        socket = new WebSocket(connectionUrl.value);
        socket.onopen = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data"></td>' +
            '</tr>';
        };
        socket.onclose = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data"> ' + htmlEscape(event.reason) + '</td>' +
            '</tr>';
        };

        let counter = 1;

        socket.onerror = updateState;
        socket.onmessage = function (event) {             
            commsLog.innerHTML += '<tr>' +      
                '<td class="commslog-data">' + htmlEscape(event.data) + '</td></tr>';
                  if(event.data == 'Incorrect' || event.data == 'Used letter' || event.data == 'You Lost!!!'){
                    counter++;
                    hangman.src = "hangman" + counter + ".png";
                  } else if (event.data == 'You Win!!!') {
                        alert("You win!")
                        closeButton.click();
                  } 
                  if(event.data == 'You Lost!!!'){
                        alert("You Lose!")
                        closeButton.click();
                  }                   
        };
    };

    function htmlEscape(str) {
        return str.toString()
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
</script>
